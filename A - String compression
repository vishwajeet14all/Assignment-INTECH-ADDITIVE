#include <bits/stdc++.h>
using namespace std;

// Decompression of string passed by compress2 funtion
void decompress(string s, vector<int>&v)
{
    int i=0,j=0;
    int n=s.length();
    string res;
    while(i<n)
    {
        while(i<n && s[i]!='#')
        {
            for(int c=1;c<=v[j];c++)
            res+=s[i];
            i++;
        }
        i++,j++;
    }
    cout<<res<<endl;
}




// compress the string passed by the compress1 function
void compress2(string &s, vector<int>&v)
{
    int i=0,j=1;
    int n=v.size();
    vector<int>v1;
    string res;
    res+=s[i];
    while(j<n)
    {
        if(v[i]==v[j])
        res+=s[j],j++;
        else
        {
            v1.push_back(v[i]);
            res+="#";
            i=j;
            j++;
            res+=s[i];
        }
    }
    res+="#";
    v1.push_back(v[i]);
    i=0,j=0;
    while(j<v1.size())
    {
        while(res[i]!='#'){
        cout<<res[i];
        i++;
        }
        cout<<v1[j++];
        i++;
    }
    cout<<endl;
    decompress(res,v1);
}
 
// compress a string “s”
void compress1(string s)
{
    int i=0,j=1;
    int n=s.length();
    vector<int>v;
    string res;
    while(j<n)
    {
        if(s[i]!=s[j])
        {
            res+=s[i];
            v.push_back(j-i);
            i=j;
        }
        j++;
    }
    res+=s[i];
    v.push_back(j-i);
    for(int i=0;i<res.length();i++)
    {
        cout<<res[i]<<v[i];
    }
    cout<<endl;
    compress2(res,v);
}

int main() {
	string s;
	cin>>s;
	compress1(s);
	return 0;
}
